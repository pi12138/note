'''
讨论
函数 re.split() 是非常实用的，因为它允许你为分隔符指定多个正则模式。比如，
在上面的例子中，分隔符可以是逗号，分号或者是空格，并且后面紧跟着任意个的空
格。只要这个模式被找到，那么匹配的分隔符两边的实体都会被当成是结果中的元素返
回。返回结果为一个字段列表，这个跟 str.split() 返回值类型是一样的。
当你使用 re.split() 函数时候，需要特别注意的是正则表达式中是否包含一个括
号捕获分组。如果使用了捕获分组，那么被匹配的文本也将出现在结果列表中。比如，
观察一下这段代码运行后的结果：
'''

import re

line = 'asdf fjdk; afed, fjek,asdf, foo'

l1 = re.split(r'(;|,|\s)\s*', line)
l2 = re.split(r'([;,\s]\s*)', line)
# 上面两种写法稍微有些不一样
print(l1)
print(l2)

'''
获取分割字符在某些情况下也是有用的。比如，你可能想保留分割字符串，用来在
后面重新构造一个新的输出字符串：
'''
l3 = l2[::2]
# print(len(l3))
l4 = l2[1::2] + [' ']
# print(len(l4))
# 上面加上一个[' ']目的是为了是两个列表长度相同，如果长度不相同下面zip()函数会选取较短列表长度截取
print("l3:",l3)
print("l4:",l4)

new_line = ''.join(v+d for v,d in zip(l3,l4))
print("line:", line)
print('new_line:', new_line)

'''
如果你不想保留分割字符串到结果列表中去，但仍然需要使用到括号来分组正则
表达式的话，确保你的分组是非捕获分组，形如 (?:...) 。比如：
'''
l5 = re.split(r'(?:;|,|\s)\s*', line)
print("l5:", l5)
